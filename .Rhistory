list.of.packages %in% installed.packages()[,"Package"]
"UBbipl %in% installed.packages()[,"Package"]
"UBbipl" %in% installed.packages()[,"Package"]
shiny::runApp()
runApp()
install.packages("git2r")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
detach("package:UBbipl", unload=TRUE)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
graphdatatest[20,]
apply(art3datin[,chosenvars],2,min)
runApp()
apply(art3datin[,chosenvars],2,min)
runApp()
runApp()
apply(art3datin[,chosenvars],2,min)
chosenvars
dim(art3datin)
runApp()
apply(art3dat[,chosenvars],2,min)
apply(art3dat[,chosenvars],2,max)
max(rbind(apply(art3dat[,chosenvars],2,max), abs(apply(art3dat[,chosenvars],2,min))
)
)
max(rbind(apply(art3dat[,chosenvars],2,max)), abs(apply(art3dat[,chosenvars],2,min))
)
rbind(apply(art3dat[,chosenvars],2,max)), abs(apply(art3dat[,chosenvars],2,min)
apply(art3dat[,chosenvars],2,max))
apply(art3dat[,chosenvars],2,max)
rbind(apply(art3dat[,chosenvars],2,max), abs(apply(art3dat[,chosenvars],2,min)))
apply(rbind(apply(art3dat[,chosenvars],2,max), abs(apply(art3dat[,chosenvars],2,min))),2,max)
runApp()
round(apply(rbind(apply(art3dat[,chosenvars],2,max), abs(apply(art3dat[,chosenvars],2,min))),2,max),0)
runApp()
runApp()
runApp()
runApp()
runApp()
apply(rbind(apply(art3dat[,chosenvars],2,max), abs(apply(art3dat[,chosenvars],2,min))),2,max)
round(apply(rbind(apply(art3dat[,chosenvars],2,max), abs(apply(art3dat[,chosenvars],2,min))),2,max),0)
rbind(round(apply(rbind(apply(art3dat[,chosenvars],2,max), abs(apply(art3dat[,chosenvars],2,min))),2,max),0),0:16)
runApp()
dim(datatestin)
dim(graphdatatest)
runApp()
updatedvars
datatestin
runApp()
datatestin
graphdatatest[20,]
graphdatatest[20,]-datatestin
runApp()
graphdatatest[20,]
graphdatatest[20,]-datatestin
dimnames(graphdatatest[20,])
is.data.frame(graphdatatest[20,])
is.data.frame(datatestin)
runApp()
runApp()
rm(art3dat)
rm(chosenvars)
runApp()
runApp()
shiny::runApp()
outplay
outplay[[1]]
runApp()
runApp()
runApp()
renderTable({matrix(c(1,2,3,4,ncol=2))})
runApp()
runApp()
runApp()
mtcars
runApp()
install.packages("DT")
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
ifelse
runApp()
runApp()
predictions
actualtest
runApp()
predictions
t(predictions[,1])
t(actualtest[,1])
dimnames(graphdata)
dimnames(graphdata)[[2]]
colnames(dimnames(graphdata)[[2]])[-1]
colnames(dimnames(graphdata)[[2]])
colnames(dimnames(graphdata)[[2]])dimnames(graphdata)[[2]][-1]
dimnames(graphdata)[[2]][-1]
varnamesall[outputfromvarsim]
varnamesall[c(1,  4,  5, 10, 12, 13, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 35)]
varnamesall
runApp()
as.data.frame(t(predictions[,1]))
rbind(as.data.frame(t(predictions[,1])),as.data.frame(t(actualtest[,1])))
as.data.frame(t(actualtest[,1]))
runApp()
bipltest$Pred
bipltest$axpred
round(bipltest$axpred,2)*100
runApp()
runApp()
runApp()
runApp()
install.packages(c("DT", "shape", "shinythemes"))
library(shiny)
install.packages("shiny")
install.packages("httpuv")
shiny::runApp()
gray()
gray
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
\c('l', 'c')
c('l', 'c')
runApp()
c('l', 'c')
displayorder
actualresults
rm(actualresults)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
actualresults
runApp()
rv$actualtesttable[,1]
rv$actualtesttable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
predictions
predictions[,2:4]
predictions[,2:4]/c(1,2,3)
t(predictions[,2:4])/c(1:16)
t(t(predictions[,2:4])/c(1:16))
apply(t(predictions[,2:4])/c(1:16),2,sum)
apply(predictions[,2:4],2,sum)
runApp()
axrawtableaxrawtable
axrawtable
runApp()
axrawtable
rv$predictionstablescoreraw
runApp()
runApp()
runApp()
bipltest$axpred
predictions[displayorder,2:4]
runApp()
runApp()
aa
round(aa,2)
runApp()
runApp()
aa
predictions[displayorder,2:4]
runApp()
t(predictions[displayorder,2:4])
t(predictions[displayorder,2:4]) * c(rep(0,15),100)
t(predictions[displayorder,2:4]) %*% c(rep(0,15),100)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
axfinaltable
addmargins(axfinaltable)
addmargins(axfinaltable,2,sum)
addmargins(axfinaltable,1,sum)
addmargins(axfinaltable,1,"Final Score")
args(addmargins)
?addmargins
addmargins(axfinaltable,1,sum)
axfinaltable
addmargins(axfinaltable,1,sum,na.rm=TRUE)
matrix(runif(10),ncol=3)
matrix(runif(10),ncol=5)
addmargins(matrix(runif(10),ncol=5))
addmargins(matrix(runif(10),ncol=5))
addmargins(matrix(runif(10),ncol=5))
addmargins(matrix(runif(10),ncol=5))
addmargins(matrix(runif(10),ncol=5),1,sum)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(a=c("<strong>a</strong>","b"),val=c(1,2))
runApp()
axfinaltableACT[dim(axfinaltableACT)[1],]
axfinaltableACT[dim(axfinaltableACT)[1],]
paste0("<strong>",axfinaltableACT[dim(axfinaltableACT)[1],],
"</strong>")axfinaltableACT[dim(axfinaltableACT)[1],]
paste0("<strong>",axfinaltableACT[dim(axfinaltableACT)[1],])
runApp()
runApp()
> paste0("<strong>",axfinaltableACT[dim(axfinaltableACT)[1],],"<\strong>")
paste0("<strong>"
)
axfinaltableACT[dim(axfinaltableACT)[1],]
"<\strong>"
runApp()
axfinaltableACT
axfinaltableACT
runApp()
axfinaltableACT[dim(axfinaltableACT)[1],]
axfinaltableACT[dim(axfinaltableACT)[1],]
runApp()
runApp()
axfinaltableACT
axfinaltableACT[-dim(axfinaltableACT)[1],]
format(axfinaltableACT[-dim(axfinaltableACT)[1],],nsmall = 2)
runApp()
format(round(axfinaltableACT[-dim(axfinaltableACT)[1],],2),nsmall = 2)
format(round(axfinaltableACT[-dim(axfinaltableACT)[1],],2),nsmall = 2)
axfinaltableACT[-dim(axfinaltableACT)[1],],2)
runApp()
aa
runApp()
abc
ac
axfinaltableACT
round(axfinaltableACT[-dim(axfinaltableACT)[1],],2)
round(axfinaltableACT[-c(1,dim(axfinaltableACT)[1]),],2)
runApp()
axfinaltableACTaxfinaltablePRED
axfinaltablePRED
runApp()
devtools::install_github("carelvdmerwe/UBbipl3")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("carelvdmerwe/UBbipl3")
install.packages("usethis")
shiny::runApp()
shiny::runApp()
runApp()
varnamesall
varnamesall[outputfromvarsim]
varnamesall[c(1,  4,  5, 10, 12, 13, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 35)]
runApp()
runApp()
dim(graphdata)
graphdatatest
dim(graphdatatest)
graphdatatest[20,]
graphdatatest[19,]
graphdatatest[21,]
graphdatatest[1,]
graphdatatest[21,]
set.seed(3)
sampleb <- sort(sample(1:dim(art3dat)[1],round(0.25*dim(art3dat)[1],0)))
runApp()
graphdatatest[15:25]
graphdatatest[15:25,]
graphdatatest[1:35,]
art3dat <- read.csv("MainTestData (old).csv")
dim(art3dat)
sort(sample(1:dim(art3dat)[1],round(0.25*dim(art3dat)[1],0)))
sort(sample(1:dim(art3dat)[1],round(0.25*dim(art3dat)[1],0)))
sort(sample(1:dim(art3dat)[1],round(0.25*dim(art3dat)[1],0)))
set.seed(3)
sort(sample(1:dim(art3dat)[1],round(0.25*dim(art3dat)[1],0)))
set.seed(3)
sort(sample(1:dim(art3dat)[1],round(0.25*dim(art3dat)[1],0)))
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
